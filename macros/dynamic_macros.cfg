# Main include for dynamic macros
# https://3dcoded.github.io/DynamicMacros

# To reload the dynamic macros, send the command:
# DYNAMIC_MACRO

# "Rendering" a macro will expand the variables in the macro, showing
# what gcode will actually be sent to the printer. To render a macro,
# send a command like:
# DYNAMIC_RENDER MACRO=test A=2

[gcode_macro QS]
description: Quick Start
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(150) | float %}
  {% set BED_TEMP = params.TEMP | default(60) | float %}
  {% set SOAK_TEMP = params.SOAK | default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_chamber_temp) | float %}
  {% set TIMEOUT = params.TIMEOUT | default(10) | int %}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
  M106 S255 # Part fan on
  LIGHT_ON
  BED_MESH_CLEAR
  G28 X Y
  G1 X150 Y150 F{80 *60} # Move to center so the fan can help heatsoak
  M109 S{EXTRUDER_TEMP} # Wait for extruder 150
  G28 Z
  CENTER
  HEAT_SOAK TARGET={BED_TEMP} SOAK_TEMP={SOAK_TEMP} TIMEOUT={TIMEOUT} COMPLETE=_QS_CONTINUE

[gcode_macro _QS_CONTINUE]
description: Quick Start
gcode:
  QUAD_GANTRY_LEVEL
  G28 Z
  CARTOGRAPHER_TOUCH
  CENTER

[gcode_macro _PRINT_END_EXTENDED]
description: Dynamic GCode to run after print end
gcode:
  _STATUS_READY

[gcode_macro TEST_M117]
description: Display a message on the printer display, clear automatically
# rename_existing: M117.1
# Not working currently
gcode:
  {% set delay = params.DELAY|default(10)|float %}   #M117 {rawparams} AHHHH
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    M117.1 {escaped_msg} AHHH
    RESPOND MSG="{escaped_msg}"
  {% else %}
    M117.1
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION={delay}

[gcode_macro TEST_VAR]
gcode:
  {% set gcode_var = printer['gcode_macro SET_PRINT_STATS_INFO'] %}
  {% set varB = gcode_var.pause_at_layer %}
  RESPOND COLOR=success MSG="dict {dict}"
  RESPOND COLOR=success MSG="TEST_VAR - {varB}"

[gcode_macro TEST_SET_VAR]
variable_macro_name: SET_PRINT_STATS_INFO:
variable_dict: {'enabled': True, 'layer': 15, 'call': 'CHANGE_FILAMENT'}
gcode:
  SET_GCODE_VARIABLE MACRO={macro_name} VARIABLE=pause_at_layer VALUE="{dict}"

  {% set gcode_var = printer["{{ 'gcode_macro' {macro_name} }}"] %}
  {% set varB = gcode_var.pause_at_layer %}

  RESPOND COLOR=success MSG="dict {dict}"
  RESPOND MSG="TEST_VAR - {varB}"

[gcode_macro TEST_PROBE_UPDOWN]
description: Test the probe by moving up and down at a specified point
# TEST_PROBE_UPDOWN X=25 Y=25
gcode:
  {% set minz = params.MINZ|default(10)|float %}
  {% set maxz = params.MAXZ|default(100)|float %}
  {% set newx = params.X|default(25)|float %}
  {% set newy = params.Y|default(25)|float %}
  {% set count = params.COUNT|default(10)|int %}
  _CLIENT_LINEAR_MOVE X={newx} Y={newy} Z={minz} F=3000 ABSOLUTE=1
  RESPOND COLOR=success MSG="TEST_PROBE_UPDOWN - start - X{newx} Y{newy}"
  PROBE_ACCURACY samples={count}
  {% for i in range(count) %}
    _CLIENT_LINEAR_MOVE Z={maxz} F=3000 ABSOLUTE=1
    _CLIENT_LINEAR_MOVE Z={minz} F=3000 ABSOLUTE=1
  {% endfor %}
  PROBE_ACCURACY samples={count}
  RESPOND COLOR=success MSG="TEST_PROBE_UPDOWN - DONE x{count} - X{newx} Y{newy}"
  _CLIENT_LINEAR_MOVE Z={minz} F=3000 ABSOLUTE=1
